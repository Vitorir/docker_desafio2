version: '3'

services: 
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.prod
    container_name: nginx
    networks: 
      - node-network
    ports:
      - "8080:8080"
    depends_on:
      - app1
      - app2  

  app1:
    build: 
      context: node
    container_name: app1
    entrypoint: >
      sh -c "
        echo 'Aguardando MySQL...' &&
        dockerize -wait tcp://db:3306 -timeout 20s &&
        echo 'MySQL está pronto!' &&
        echo 'Iniciando Node.js...' &&
        node index.js
      "
    networks: 
      - node-network
    volumes: 
      - ./node:/usr/src/app
      - /usr/src/app/node_modules
    tty: true
    ports: 
      - "3000:3000"
    depends_on: 
       - db
    environment:
      - APP_NAME=App1

  app2:
    build: 
      context: node
    container_name: app2
    entrypoint: >
      sh -c "
        echo 'Aguardando MySQL...' &&
        dockerize -wait tcp://db:3306 -timeout 20s &&
        echo 'MySQL está pronto!' &&
        echo 'Iniciando Node.js...' &&
        node index.js
      "
    networks: 
      - node-network
    volumes: 
      - ./node:/usr/src/app
      - /usr/src/app/node_modules
    tty: true
    ports: 
      - "3001:3000"  # Mapeando para uma porta diferente
    depends_on: 
       - db
    environment:
      - APP_NAME=App2

  db:
    image: mysql:5.7
    command: --innodb-use-native-aio=0
    container_name: db
    restart: always
    tty: true
    volumes: 
      - ./mysql:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment: 
      - MYSQL_DATABASE=nodedb
      - MYSQL_ROOT_PASSWORD=root
    networks: 
      - node-network

networks: 
  node-network:
    driver: bridge